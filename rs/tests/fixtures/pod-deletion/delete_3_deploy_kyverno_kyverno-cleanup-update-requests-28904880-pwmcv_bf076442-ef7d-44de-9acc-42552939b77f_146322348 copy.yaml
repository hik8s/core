apiVersion: v1
kind: Deployment
metadata:
  creationTimestamp: 2024-12-15T20:00:00Z
  deletionGracePeriodSeconds: 0
  deletionTimestamp: 2024-12-15T20:10:04Z
  generateName: kyverno-cleanup-update-requests-28904880-
  labels:
    batch.kubernetes.io/controller-uid: f5fd0d47-b75d-425d-ad48-72a88801b2ba
    batch.kubernetes.io/job-name: kyverno-cleanup-update-requests-28904880
    controller-uid: f5fd0d47-b75d-425d-ad48-72a88801b2ba
    job-name: kyverno-cleanup-update-requests-28904880
  managedFields:
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:metadata:
        f:generateName: {}
        f:labels:
          .: {}
          f:batch.kubernetes.io/controller-uid: {}
          f:batch.kubernetes.io/job-name: {}
          f:controller-uid: {}
          f:job-name: {}
        f:ownerReferences:
          .: {}
          k:{"uid":"f5fd0d47-b75d-425d-ad48-72a88801b2ba"}: {}
      f:spec:
        f:containers:
          k:{"name":"cleanup"}:
            .: {}
            f:command: {}
            f:image: {}
            f:imagePullPolicy: {}
            f:name: {}
            f:resources: {}
            f:securityContext:
              .: {}
              f:allowPrivilegeEscalation: {}
              f:capabilities:
                .: {}
                f:drop: {}
              f:privileged: {}
              f:readOnlyRootFilesystem: {}
              f:runAsNonRoot: {}
              f:seccompProfile:
                .: {}
                f:type: {}
            f:terminationMessagePath: {}
            f:terminationMessagePolicy: {}
        f:dnsPolicy: {}
        f:enableServiceLinks: {}
        f:restartPolicy: {}
        f:schedulerName: {}
        f:securityContext: {}
        f:serviceAccount: {}
        f:serviceAccountName: {}
        f:terminationGracePeriodSeconds: {}
    manager: kube-controller-manager
    operation: Update
    time: 2024-12-15T20:00:00Z
  - apiVersion: v1
    fieldsType: FieldsV1
    fieldsV1:
      f:status:
        f:conditions:
          k:{"type":"ContainersReady"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"Initialized"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:reason: {}
            f:status: {}
            f:type: {}
          k:{"type":"PodReadyToStartContainers"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:status: {}
            f:type: {}
          k:{"type":"Ready"}:
            .: {}
            f:lastProbeTime: {}
            f:lastTransitionTime: {}
            f:reason: {}
            f:status: {}
            f:type: {}
        f:containerStatuses: {}
        f:hostIP: {}
        f:hostIPs: {}
        f:phase: {}
        f:podIP: {}
        f:podIPs:
          .: {}
          k:{"ip":"10.244.1.148"}:
            .: {}
            f:ip: {}
        f:startTime: {}
    manager: kubelet
    operation: Update
    subresource: status
    time: 2024-12-15T20:00:04Z
  name: kyverno-cleanup-update-requests-28904880-pwmcv
  namespace: kyverno
  ownerReferences:
  - apiVersion: batch/v1
    blockOwnerDeletion: true
    controller: true
    kind: Deployment
    name: kyverno-cleanup-update-requests-28904880
    uid: 12345678-b75d-425d-ad48-425d425d425d
  resourceVersion: '146322348'
  uid: 11111111-1111-1111-1111-111111111111
spec:
  containers:
  - command:
    - /bin/bash
    - -c
    - |
      set -euo pipefail
      COUNT=$(kubectl get updaterequests.kyverno.io -A | wc -l)
      if [ "$COUNT" -gt 10000 ]; then
        echo "too many updaterequests found ($COUNT), cleaning up..."
        kubectl delete updaterequests.kyverno.io --all -n kyverno
      else
        echo "($COUNT) reports found, no clean up needed"
      fi
    image: bitnami/kubectl:1.28.5
    imagePullPolicy: IfNotPresent
    name: cleanup
    resources: {}
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-jvmd2
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: prod1-node1
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: OnFailure
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: kyverno-cleanup-jobs
  serviceAccountName: kyverno-cleanup-jobs
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-jvmd2
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  phase: Pending
  qosClass: BestEffort
